# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
# SAVE THIS
from PyQt5.QtGui import QStandardItemModel, QIcon
from PyQt5.QtWidgets import QMessageBox, QTreeWidgetItem, QFileIconProvider,QTreeWidget, QInputDialog, QHBoxLayout, QFrame, QApplication
from pathlib import Path
from subprocess import Popen
from functools import reduce
from zipfile import ZipFile
import os, requests, json, re, base64, shutil , sys

# TODO: Verify IDA support

collare_home = Path.home() / ".collare_projects"
current_running_file_dir, filename = os.path.split(os.path.abspath(__file__))
connected = False
supported_db_names = ["bndb","i64","hop","rzdb","ghdb","jdb2"]

class ProjectTree(QTreeWidget):
    def __init__(self, parent):
        super(ProjectTree, self).__init__(parent)
        self.setMouseTracking(True)
        self.setAcceptDrops(True)
        self.previousHighlight = None

    def setProjectData(self,server,projectName,username,password,cert,parent):
        self.server = server
        self.projectName = projectName
        self.username = username
        self.password = password
        self.cert = cert
        self.parent = parent

    def dragEnterEvent(self, event):
        event.accept()

    def dragMoveEvent(self, event):
        event.accept()
        item = self.itemAt(event.pos())
        if item and item != self.previousHighlight: # Not none
            if item.icon(0).name() == "application-x-executable":
                # Highlight parent folder
                item.parent().setSelected(True)
                if self.previousHighlight and self.previousHighlight != item.parent():
                    self.previousHighlight.setSelected(False)
                self.previousHighlight = item.parent()
            elif item.icon(0).name() == "folder":
                # Highlight current folder
                item.setSelected(True)
                if self.previousHighlight:
                    self.previousHighlight.setSelected(False)
                self.previousHighlight = item
            else:
                # Higlight parent of parent (for cases where we hover over DB files listing)
                item.parent().parent().setSelected(True)
                if self.previousHighlight and self.previousHighlight != item.parent().parent():
                    self.previousHighlight.setSelected(False)
                self.previousHighlight = item.parent().parent()

    def showPopupBox(self,title,text,icon):
        msg = QMessageBox(self)
        msg.setWindowTitle(title)
        msg.setText(text)
        msg.setIcon(icon)
        x = msg.exec_()
    
    def mimeTypes(self):
        return ["*"]

    def uploadFile(self,fsPath,remotePath):
        with open(fsPath, "rb") as data_file:
            encoded_file = base64.b64encode(data_file.read())
        values = {'path': remotePath,"project":self.projectName,"file":encoded_file,"file_name":os.path.basename(fsPath)}
        response = requests.post(f'{self.server}/push', json=values, auth=(self.username, self.password), verify=self.cert)
        if response.status_code != 200:
            self.showPopupBox("Error Uploading File","Something went horribly wrong!",QMessageBox.Critical)
        elif response.text == "FILE_ALREADY_EXISTS":
            self.showPopupBox("Error Uploading File","File already exists!",QMessageBox.Critical)
        self.parent.refreshProject()

    def getPathToRoot(self,treeItem):
        path = [treeItem.text(0)]
        tmpItem = treeItem
        while tmpItem.parent():
            tmpItem = tmpItem.parent()
            path.insert(0, tmpItem.text(0))
        return path

    def dropEvent(self, event):
        if event.mimeData().hasUrls:
            for url in event.mimeData().urls():
                # Folders currently not supported
                if Path(url.path()).is_dir():
                    self.showPopupBox("Upload Error","Uploading of folders is not supported!",QMessageBox.Critical)
                    return
                item = self.itemAt(event.pos())
                if item:
                    # Adjust target of the drop event based on where we are
                    if item.icon(0).name() != "folder":
                        if item.parent().icon(0).name() == "folder":
                            item = item.parent()
                        elif item.parent().icon(0).name() == "application-x-executable":
                            item = item.parent().parent()
                        else:
                            item = item.parent().parent().parent()
                    # Upload file
                    self.uploadFile(url.path(),self.getPathToRoot(item))


class Ui_Dialog(object):
    def prepopulateConnect(self):
        # Read previously stored connection information
        if os.path.exists(str(collare_home / "connection.json")):
            with open(str(collare_home / "connection.json"),"r") as connection_file:
                connection_data = json.load(connection_file)
                self.serverText.setText(connection_data["server"])
                self.usernameText.setText(connection_data["username"])
                self.serverCertPathText.setText(connection_data["cert"])

    def storeConnectionDetails(self,server,username,cert):
        # Store connection details
        with open(str(collare_home / "connection.json"),"w") as connection_file:
            json.dump({"username":username,"server":server,"cert":cert}, connection_file)

    def showPopupBox(self,title,text,icon):
        msg = QMessageBox(self)
        msg.setWindowTitle(title)
        msg.setText(text)
        msg.setIcon(icon)
        x = msg.exec_()
    
    def which(self,program):
        # Search for programs in path
        def is_exe(fpath):
            return os.path.isfile(fpath) and os.access(fpath, os.X_OK)
        fpath, fname = os.path.split(program)
        if fpath:
            if is_exe(program):
                return program
        else:
            for path in os.environ["PATH"].split(os.pathsep):
                exe_file = os.path.join(path, program)
                if is_exe(exe_file):
                    return exe_file

        return None

    def onSuccessConnect(self):
        # Do UI changes upon connection
        self.connected = True
        self.connectStatusLabel.setText("Connected")
        self.connectStatusLabel.setStyleSheet("color: lightgreen")
        self.passwordText.setDisabled(True)
        self.usernameText.setDisabled(True)
        self.serverCertPathText.setDisabled(True)
        self.serverText.setDisabled(True)
        self.connectButton.setText("Disconnect")
        self.adminTab.setEnabled(True)
        self.newProjectFrame.setEnabled(True)
        self.existingProjectFrame.setEnabled(True)
        self.populateAllUserListings()
        self.populateExistingProjects()
        #self.projectTab.setEnabled(True)
    
    def onDisconnect(self):
        # Do UI changes upon disconnect
        self.connected = False
        self.connectStatusLabel.setText("Disconnected")
        self.connectStatusLabel.setStyleSheet("color: black")
        self.passwordText.setDisabled(False)
        self.usernameText.setDisabled(False)
        self.serverCertPathText.setDisabled(False)
        self.serverText.setDisabled(False)
        self.connectButton.setText("Connect")
        self.adminTab.setEnabled(False)
        self.newProjectFrame.setEnabled(False)
        self.existingProjectFrame.setEnabled(False)       
        #self.projectTab.setEnabled(False)

    def getPathToRoot(self,treeItem):
        # Traces the path to root of the manifest file
        path = [treeItem.text(0)]
        tmpItem = treeItem
        while tmpItem.parent():
            tmpItem = tmpItem.parent()
            path.insert(0, tmpItem.text(0))
        return path

    def addFolderToZip(self, zip_file, folder,strip_path):
        # Adds folder to zip file (used to handle Ghidra projects)
        for file in os.listdir(folder):
            full_path = os.path.join(folder, file)
            if os.path.isfile(full_path):
                zip_file.write(full_path,os.path.relpath(full_path,strip_path))
            elif os.path.isdir(full_path):
                self.addFolderToZip(zip_file, full_path,strip_path)

    def autoRemoveDirs(self):
        # Automatically remove directories that are not matching anything in current manifest
        # This means that local files reflect state before someone else deleted something
        mag = [self.currentProjectManifest[self.currentProject]]
        path_mag = [os.path.join(str(collare_home),self.currentProject)]
        while mag:
            current_folder = mag.pop()
            current_fs_path = path_mag.pop()
            for fs_item in os.listdir(current_fs_path):
                if not fs_item in current_folder.keys():# and not current_folder[fs_item]["__file__type__"]:
                    # Delete only folders as those are reflected in manifest file immediatelly 
                    shutil.rmtree(os.path.join(current_fs_path,fs_item))
                elif not current_folder[fs_item]["__file__type__"]:
                    # Add folders to magazine
                    mag.append(current_folder[fs_item])
                    path_mag.append(os.path.join(current_fs_path,fs_item))



    def processIn(self,tool,path):
        # Process the initial binary in selected tool
        data = {
            "project": self.currentProject,
            "path": path[:-1],
            "file_name": path[-1]
        }
        response = requests.post(f'{self.server}/getfile', json=data, auth=(self.username, self.password), verify=self.cert)
        if response.status_code != 200:
            self.showPopupBox("Error Donwloading File","Something went horribly wrong!",QMessageBox.Critical)
        response_data = response.json()
        destination = os.path.join(str(collare_home),*path) # Create folder for each file
        if not os.path.exists(destination):
            os.makedirs(destination)
        file_path = os.path.join(destination,path[-1])
        with open(file_path,"wb") as dest_file:
            dest_file.write(base64.b64decode(response_data['file']))
        if tool == "binja":
            Popen([f"binaryninja '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif tool == "hopper":
            Popen([f"Hopper -e '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif tool == "cutter":
            Popen([f"cd {destination} && Cutter '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif tool == "ida":
            Popen([f"ida64 '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif tool == "jeb":
            Popen([f"jeb '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif tool == "ghidra":
            gpr_path, ok = QInputDialog.getText(self, 'Import Ghidra Project', f"The file has been donwloaded to '{file_path}'.\nPlease create a ghidra project with name that matches the name of the file ({path[-1]}) and enter full path to the '{path[-1]}.gpr' file:")
            if ok:
                with ZipFile(os.path.join(destination,path[-1]+".ghdb"), 'w') as zipObj:
                    zipObj.write(gpr_path,os.path.basename(gpr_path))
                    self.addFolderToZip(zipObj,gpr_path.replace(".gpr",".rep"),os.path.dirname(gpr_path))


    def isCheckedOut(self,path):
        # Verify if the file is currently checkedout
        checkout, current_user = False, False
        if reduce(dict.get,path[:-1],self.currentProjectManifest)["__rev_dbs__"][path[-1]] != None:
            checkout = True
            if reduce(dict.get,path[:-1],self.currentProjectManifest)["__rev_dbs__"][path[-1]] == self.username:
                current_user = True
        return checkout,current_user

    def rightClickMenuHandle(self,event):
        # Get item which was clicked
        clickedItem = self.projectTreeView.itemAt(event)
        self.menu = QtWidgets.QMenu(self.projectTreeView)
        item = self.projectTreeView.itemAt(event)
        self.menu.addSection("Project")
        refresh = self.menu.addAction(QIcon.fromTheme("browser-reload"),"Refresh") # TODO ugly icon
        if item.icon(0).name() == "folder":
            # Right click on folder
            self.menu.addSection("Folder operations")
            create_folder = self.menu.addAction(QIcon.fromTheme("folder-new"),"New Folder")
            delete_folder = self.menu.addAction(QIcon.fromTheme("edit-delete"),"Delete Folder")
        elif item.icon(0).name() == "application-x-executable":
            # Right click on original binary
            self.menu.addSection("Process in:")
            open_ida = self.menu.addAction(QIcon(os.path.join(current_running_file_dir,"icons","i64.png")),"IDA Pro")
            open_rizin = self.menu.addAction(QIcon(os.path.join(current_running_file_dir,"icons","rzdb.png")),"Cutter")
            open_binja = self.menu.addAction(QIcon(os.path.join(current_running_file_dir,"icons","bndb.png")),"Binary Ninja")
            open_hop = self.menu.addAction(QIcon(os.path.join(current_running_file_dir,"icons","hop.png")),"Hopper Disassembler")
            open_ghidra = self.menu.addAction(QIcon(os.path.join(current_running_file_dir,"icons","ghdb.png")),"Ghidra")
            open_jeb = self.menu.addAction(QIcon(os.path.join(current_running_file_dir,"icons","jdb2.png")),"JEB")
            self.menu.addSection("File operations")
            push_all = self.menu.addAction(QIcon.fromTheme("go-top"),"Push Local DBs")
            delete_file = self.menu.addAction(QIcon.fromTheme("edit-delete"),"Delete File")
            for node in range(0,clickedItem.childCount()):
                disabled_tool = clickedItem.child(node).text(0)
                if "i64" in disabled_tool:
                    open_ida.setEnabled(False)
                if "bndb" in disabled_tool:
                    open_binja.setEnabled(False)
                if "hop" in disabled_tool:
                    open_hop.setEnabled(False)
                if "rzdb" in disabled_tool:
                    open_rizin.setEnabled(False)
                if "ghdb" in disabled_tool:
                    open_ghidra.setEnabled(False)
                if "jdb2" in disabled_tool:
                    open_jeb.setEnabled(False)
        else:
            # Right click on one of the DB files
            self.menu.addSection("File operations")
            open_file = self.menu.addAction(QIcon.fromTheme("document-open"),"Open File")
            checkout = self.menu.addAction(QIcon.fromTheme("go-bottom"),"Check-out")
            checkin = self.menu.addAction(QIcon.fromTheme("go-top"),"Check-in")
            undo_checkout = self.menu.addAction(QIcon.fromTheme("edit-undo"),"Undo Check-out")
            delete_file = self.menu.addAction(QIcon.fromTheme("edit-delete"),"Delete File")
            checked,current_user =  self.isCheckedOut(self.getPathToRoot(clickedItem))
            if checked:
                checkout.setEnabled(False)
                if not current_user:
                    checkin.setEnabled(False)
                    undo_checkout.setEnabled(False)
                    delete_file.setEnabled(False)
            else:
                checkin.setEnabled(False)
                undo_checkout.setEnabled(False)

        
        performed_action = self.menu.exec_(self.projectTreeView.mapToGlobal(event))
        # Handle actions below
        if performed_action:
            if performed_action.text() == "New Folder":
                self.mkdir(self.getPathToRoot(clickedItem))
            elif performed_action.text() == "Delete Folder":
                self.deleteDir(self.getPathToRoot(clickedItem))
            elif performed_action.text() == "Delete File":
                self.deleteFile(self.getPathToRoot(clickedItem))
            elif performed_action.text() == "Binary Ninja":
                self.processIn("binja",self.getPathToRoot(clickedItem))
            elif performed_action.text() == "Hopper Disassembler":
                self.processIn("hopper",self.getPathToRoot(clickedItem))
            elif performed_action.text() == "Cutter":
                self.processIn("cutter",self.getPathToRoot(clickedItem))
            elif performed_action.text() == "IDA Pro":
                self.processIn("ida",self.getPathToRoot(clickedItem))
            elif performed_action.text() == "Ghidra":
                self.processIn("ghidra",self.getPathToRoot(clickedItem))
            elif performed_action.text() == "JEB":
                self.processIn("jeb",self.getPathToRoot(clickedItem))
            elif performed_action.text() == "Push Local DBs":
                self.pushLocal(self.getPathToRoot(clickedItem))
            elif performed_action.text() == "Check-out":
                self.checkoutDBFile(self.getPathToRoot(clickedItem))
            elif performed_action.text() == "Check-in":
                self.checkinDBFile(self.getPathToRoot(clickedItem))
            elif performed_action.text() == "Undo Check-out":
                self.undoCheckoutDBFile(self.getPathToRoot(clickedItem))
            elif performed_action.text() == "Open File":
                self.openDBFile(self.getPathToRoot(clickedItem))
            elif performed_action.text() == "Refresh":
                self.refreshProject()
    
    def pushLocal(self,path):
        # Walk through the folder in 'path' and push all known (supported_db_names) files to the server
        # Files that already exists are uploaded but silently ignored by the server
        containing_folder = os.path.join(str(collare_home),*path) # Sperate folder for files
        filename = path[-1]
        filename_no_extension = os.path.splitext(filename)[0]
        for db_file in os.listdir(containing_folder):
            filename_extension = os.path.splitext(db_file)[1][1:]
            if db_file.startswith(filename_no_extension) and filename_extension in supported_db_names:
                with open(os.path.join(containing_folder,db_file), "rb") as data_file:
                    encoded_file = base64.b64encode(data_file.read())
                if filename_extension == "hop" or filename_extension == "bndb":
                    # Hopper and binary ninja do strip the extension by default when saving projects so check if we need to put it back
                    if os.path.splitext(db_file)[0] != filename:
                        db_file = filename + f".{filename_extension}"
                values = {'path': path,"project":self.currentProject,"file":encoded_file,"file_name":db_file}
                response = requests.post(f'{self.server}/pushdbfile', json=values, auth=(self.username, self.password), verify=self.cert)
                if response.status_code != 200:
                    self.showPopupBox("Error Uploading File","Something went horribly wrong!",QMessageBox.Critical)
        self.refreshProject()


    def existingProjectSelectHandler(self):
        # Select existing project from the server and open it
        try:
            selectedProject = self.existingProjectsList.selectedItems()[0].text()
        except:
            self.showPopupBox("Error","No project selected!",QMessageBox.Critical)
            return
        response = requests.get(f'{self.server}/openproject', params={"project":selectedProject}, auth=(self.username, self.password), verify=self.cert)
        if response.status_code != 200:
            self.showPopupBox("Error Opening Project","Something went horribly wrong!",QMessageBox.Critical)
        else:
            if response.text == "PROJECT_DOES_NOT_EXIST":
                self.showPopupBox("Error Creating Project",f"Project with name '{selectedProject}' does not exist!",QMessageBox.Critical)
                return
            self.currentProjectManifest = response.json()
            self.currentProject = selectedProject
            self.projectTab.setEnabled(True)
            self.mainTabWidget.setCurrentIndex(1)
            self.projectTreeView.setProjectData(self.server,self.currentProject,self.username,self.password,self.cert,self)
            self.currentProjectLocalPath = Path(collare_home / self.currentProject)
            self.currentProjectLocalPath.mkdir(exist_ok=True)
            self.populateCurrentProjectUserListing()
            self.refreshProject()
        

    def deleteExistingProjectHandler(self):
        # Delete remote project
        try:
            selectedProject = self.existingProjectsList.selectedItems()[0].text()
        except:
            self.showPopupBox("Error","No project selected!",QMessageBox.Critical)
            return
        questionBox = QMessageBox()
        answer = questionBox.question(self,"Deleting project", f"Are you sure that you want to delete '{selectedProject}' project?", questionBox.Yes | questionBox.No)
        if answer == questionBox.Yes:
            response = requests.get(f'{self.server}/deleteproject', params={"project":selectedProject}, auth=(self.username, self.password), verify=self.cert)
            if response.status_code != 200:
                self.showPopupBox("Error Deleting Project","Something went horribly wrong!",QMessageBox.Critical)
            else:
                self.showPopupBox("Success",f"Project '{selectedProject}' was deleted!",QMessageBox.Information)
                shutil.rmtree(os.path.join(str(collare_home),selectedProject))
                self.populateExistingProjects()

    def createNewProjectClickHandler(self):
        # Create new project
        projectName = self.newProjectName.text()
        if not re.match(r'^\w+$',projectName):
            self.showPopupBox("Invalid Project Name","Project name can contain only letters, numbers and '_' (underscores).",QMessageBox.Critical)
            return
        selectedItems = self.newProjectUsersList.selectedItems()
        user_list = []
        for item in selectedItems:
            user_list.append(item.text())
        # Auto-add self
        if self.username not in user_list:
            user_list.append(self.username)
        data={"project":projectName,"users":user_list}
        response = requests.post(f'{self.server}/createproject', json=data, auth=(self.username, self.password), verify=self.cert)
        if response.status_code != 200:
            self.showPopupBox("Error Creating Project","Something went horribly wrong!",QMessageBox.Critical)
        else:
            if response.text == "ALREADY_EXISTS":
                self.showPopupBox("Error Creating Project",f"Project with name '{projectName}' already exists!",QMessageBox.Critical)
                return
            self.showPopupBox("Success",f"New project '{projectName}' was created!",QMessageBox.Information)
            self.populateExistingProjects()
            self.currentProject = projectName
            self.currentProjectManifest = response.json()
            self.projectTab.setEnabled(True)
            self.mainTabWidget.setCurrentIndex(1)
            self.projectTreeView.setProjectData(self.server,self.currentProject,self.username,self.password,self.cert,self)
            self.currentProjectLocalPath = Path(collare_home / self.currentProject)
            self.currentProjectLocalPath.mkdir(exist_ok=True)
            self.populateCurrentProjectUserListing()
            self.refreshProject()

    def mkdir(self,path):
        # Create directory
        dirname, ok = QInputDialog.getText(self, 'New Folder', 'Enter name for the folder:')
        if ok:
            if not re.match(r'^\w+$',dirname):
                self.showPopupBox("Invalid Folder Name","Folder name can contain only letters, numbers and '_' (underscores).",QMessageBox.Critical)
                return
            data = {
                "project":self.currentProject,
                "path": path,
                "dirname": dirname
            }
            response = requests.post(f'{self.server}/mkdir', json=data, auth=(self.username, self.password), verify=self.cert)
            if response.status_code != 200:
                self.showPopupBox("Error Creating Folder","Something went horribly wrong!",QMessageBox.Critical)
            elif response.text == "FOLDER_ALREADY_EXISTS":
                self.showPopupBox("Error Creating Folder","Folder with this name already exists!",QMessageBox.Critical)
            self.refreshProject()
    
    def deleteDir(self,path):
        # Delete directory
        if len(path) == 1:
            self.showPopupBox("Error Deleting Folder","Cannot delete project root!",QMessageBox.Critical)
            return
        questionBox = QMessageBox()
        answer = questionBox.question(self,"Deleting Folder", f"Are you sure that you want to delete '{path[-1]}' folder?", questionBox.Yes | questionBox.No)
        if answer == questionBox.Yes:
            data = {
                "project":self.currentProject,
                "path": path[:-1],
                "dirname": path[-1]
            }
            response = requests.post(f'{self.server}/deletedir', json=data, auth=(self.username, self.password), verify=self.cert)
            if response.status_code != 200:
                self.showPopupBox("Error Deleting Folder","Something went horribly wrong!",QMessageBox.Critical)
            self.refreshProject()
            if response.text == "DONE":
                try:
                    shutil.rmtree(os.path.join(str(collare_home),*path))
                except FileNotFoundError:
                    pass
            elif response.text == "CHECKEDOUT_FILE":
                self.showPopupBox("Error Deleting Folder","One of the files in this folder is currently checked-out!",QMessageBox.Critical)

    def undoCheckoutDBFile(self,path):
        # Removes checkout flag from the file
        filename = f"{path[-2]}.{path[-1]}"
        data = {
            "project": self.currentProject,
            "path": path[:-1],
            "file_name": filename
        }
        response = requests.post(f'{self.server}/undocheckout', json=data, auth=(self.username, self.password), verify=self.cert)
        if response.status_code != 200:
            self.showPopupBox("Error During Undo Check-Out","Something went horribly wrong!",QMessageBox.Critical)
            return
        elif response.text == "FILE_NOT_CHECKEDOUT":
            self.showPopupBox("Error During Undo Check-Out","File not checked out!",QMessageBox.Critical)
            return
        self.refreshProject()


    def openDoubleClickWrapper(self):
        # Double click on item, open only if parent is binary - i.e. we are clicking on db file
        selected_item = self.projectTreeView.selectedItems()
        if selected_item[0].parent().icon(0).name() == "application-x-executable":
            self.openDBFile(self.getPathToRoot(selected_item[0]))

    def openDBFile(self,path):
        # Opens db file based on the relevant tool
        filename = f"{path[-2]}.{path[-1]}"
        data = {
            "project": self.currentProject,
            "path": path[:-1],
            "file_name": filename
        }
        response = requests.post(f'{self.server}/opendbfile', json=data, auth=(self.username, self.password), verify=self.cert)
        if response.status_code != 200:
            self.showPopupBox("Error During Check-Out","Something went horribly wrong!",QMessageBox.Critical)
            return
        elif response.text != "FILE_ALREADY_CHECKEDOUT":
            self.showPopupBox("Opening File without Check-Out","Please consider the file to be open in 'read-only' mode. Re-opening the file or performing checkout will overwrite any changes made. Make sure to do 'Check-out' if you want to do some changes!",QMessageBox.Information)
            response_data = response.json()
            destination = os.path.join(str(collare_home),*path[:-1]) # Create folder for each file
            if not os.path.exists(destination):
                os.makedirs(destination)
            file_path = os.path.join(destination,filename)
            with open(file_path,"wb") as dest_file:
                dest_file.write(base64.b64decode(response_data['file']))
        destination = os.path.join(str(collare_home),*path[:-1])
        file_path = os.path.join(destination,filename)
        if path[-1] == "bndb":
            Popen([f"binaryninja '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif path[-1] == "hop":
            Popen([f"Hopper -d '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif path[-1] == "rzdb":
            # TODO Cutter actually cant open rzdb files at the moment
            Popen([f"cd {destination} && Cutter '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif path[-1] == "i64":
            Popen([f"ida64 '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif path[-1] == "jdb2":
            Popen([f"jeb '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif path[-1] == "ghdb":
            shutil.unpack_archive(file_path, destination, "zip")  
            Popen([f"ghidraRun '{os.path.join(destination,filename.replace('ghdb','gpr'))}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        self.refreshProject()
    
    def checkoutDBFile(self,path):
        # Checks-out the DB file for editing
        filename = f"{path[-2]}.{path[-1]}"
        data = {
            "project": self.currentProject,
            "path": path[:-1],
            "file_name": filename
        }
        response = requests.post(f'{self.server}/checkout', json=data, auth=(self.username, self.password), verify=self.cert)
        if response.status_code != 200:
            self.showPopupBox("Error During Check-Out","Something went horribly wrong!",QMessageBox.Critical)
            return
        elif response.text == "FILE_ALREADY_CHECKEDOUT":
            self.showPopupBox("Error During Check-Out","File already checked out!",QMessageBox.Critical)
            return
        response_data = response.json()
        destination = os.path.join(str(collare_home),*path[:-1]) # Create folder for each file
        if not os.path.exists(destination):
            os.makedirs(destination)
        file_path = os.path.join(destination,filename)
        with open(file_path,"wb") as dest_file:
            dest_file.write(base64.b64decode(response_data['file']))
        if path[-1] == "bndb":
            Popen([f"binaryninja '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif path[-1] == "hop":
            Popen([f"Hopper -d '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif path[-1] == "rzdb":
            # TODO Cutter actually cant open rzdb files at the moment
            Popen([f"cd {destination} && Cutter '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif path[-1] == "i64":
            Popen([f"ida64 '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif path[-1] == "jdb2":
            Popen([f"jeb '{file_path}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        elif path[-1] == "ghdb":
            shutil.unpack_archive(file_path, destination, "zip")  
            Popen([f"ghidraRun '{os.path.join(destination,filename.replace('ghdb','gpr'))}'"], shell=True,stdin=None, stdout=None, stderr=None, close_fds=True)
        self.refreshProject()

    def checkinDBFile(self,path):
        # Performs check-in of the chcked-out file, this is the only way to update DB files on the server
        containing_folder = os.path.join(str(collare_home),*path[:-1]) # Sperate folder for files
        filename = f"{path[-2]}.{path[-1]}"
        if path[-1] == "ghdb":
            gpr_path = os.path.join(containing_folder,path[-2] + ".gpr")
            with ZipFile(os.path.join(containing_folder,filename), 'w') as zipObj:
                zipObj.write(gpr_path,os.path.basename(gpr_path))
                self.addFolderToZip(zipObj,gpr_path.replace("gpr","rep"),os.path.dirname(gpr_path))
        with open(os.path.join(containing_folder,filename), "rb") as data_file:
            encoded_file = base64.b64encode(data_file.read())
        values = {'path': path[:-1],"project":self.currentProject,"file":encoded_file,"file_name":filename}
        response = requests.post(f'{self.server}/checkin', json=values, auth=(self.username, self.password), verify=self.cert)
        if response.status_code != 200:
            self.showPopupBox("Error During Check-In","Something went horribly wrong!",QMessageBox.Critical)
        elif response.text == "FILE_NOT_CHECKEDOUT":
            self.showPopupBox("Error During Check-In","File is not checked-out to you!",QMessageBox.Critical)
        self.refreshProject()

    def deleteFile(self,path):
        # Removes any file from the server (and local) storage
        if len(path) == 1:
            self.showPopupBox("Error Deleting Folder","Cannot delete project root!",QMessageBox.Critical)
            return
        questionBox = QMessageBox()
        answer = questionBox.question(self,"Deleting File", f"Are you sure that you want to delete '{path[-1]}' file?", questionBox.Yes | questionBox.No)
        if answer == questionBox.Yes:
            data = {
                "project":self.currentProject,
                "path": path[:-1],
                "filename": path[-1]
            }
            response = requests.post(f'{self.server}/deletefile', json=data, auth=(self.username, self.password), verify=self.cert)
            if response.status_code != 200:
                self.showPopupBox("Error Deleting File","Something went horribly wrong!",QMessageBox.Critical)
            self.refreshProject()
            if response.text == "DONE":
                if path[-1] in supported_db_names:
                    remove_path = os.path.join(str(collare_home),*path[:-1],path[-2]) + f".{path[-1]}"
                    os.remove(remove_path)
                else:
                    shutil.rmtree(os.path.join(str(collare_home),*path))
            elif response.text == "CHECKEDOUT_FILE":
                self.showPopupBox("Error Deleting Folder","This file is currently checked-out!",QMessageBox.Critical)
                

    def refreshProject(self):
        # Refershes the view of the project
        response = requests.get(f'{self.server}/openproject', params={"project":self.currentProject}, auth=(self.username, self.password), verify=self.cert)
        if response.status_code != 200:
            self.showPopupBox("Error Refershing Project Data","Something went horribly wrong!",QMessageBox.Critical)
        else:
            if response.text == "PROJECT_DOES_NOT_EXIST":
                self.showPopupBox("Error Refershing Project Data",f"Project with name '{self.currentProject}' does not exist!",QMessageBox.Critical)
                return
            self.currentProjectManifest = response.json()
        self.refreshProjectTree()
        self.autoRemoveDirs()
        self.projectTreeView.expandAll()

    def changePasswordClickHandler(self):
        req_data = {"password":self.newPasswrdText1.text()}
        if self.newPasswrdText1.text() != self.newPasswrdText2.text():
            self.showPopupBox("Password Change Error","Passwords don't match!",QMessageBox.Critical)
            return
        response = requests.post(f'{self.server}/changepwd', data=req_data, auth=(self.username, self.password), verify=self.cert)
        if response.status_code != 200:
            self.showPopupBox("Error Changing Password","Something went horribly wrong!",QMessageBox.Critical)
        else:
            self.showPopupBox("Password Changed",f"Password for user '{self.username}' was changed!",QMessageBox.Information)


    def addNewGlobalUserClickHandler(self):
        req_data = {"username":self.newUserNameText.text(),"password":self.newUserPwdText.text()}
        if self.username != "admin":
            self.showPopupBox("Cannot create user","You need to be 'admin' to do that!",QMessageBox.Critical)
            return
        if not req_data["username"] or not req_data["password"]:
            self.showPopupBox("Cannot create user","Make sure to fill in all fields!",QMessageBox.Critical)
            return
        response = requests.post(f'{self.server}/adduser', data=req_data, auth=(self.username, self.password), verify=self.cert)
        if response.status_code != 200:
            self.showPopupBox("Error Creating User","Something went horribly wrong!",QMessageBox.Critical)
        else:
            self.showPopupBox("New User Added",f"New user with name {self.newUserNameText.text()} was added!",QMessageBox.Information)
            self.populateAllUserListings()

    def populateAllUserListings(self):
        response = requests.get(f'{self.server}/getusers', auth=(self.username, self.password), verify=self.cert)
        if response.status_code != 200:
            self.showPopupBox("Error Getting Users","Something went horribly wrong!",QMessageBox.Critical)
            return
        user_list = response.json()
        self.newProjectUsersList.clear()
        self.newProjectUsersList.addItems(user_list["users"])
        self.projectAllUsersView.clear()
        self.projectAllUsersView.addItems(user_list["users"])
    
    def populateCurrentProjectUserListing(self):
        response = requests.get(f'{self.server}/getprojectusers', params={"project":self.currentProject}, auth=(self.username, self.password), verify=self.cert)
        if response.status_code != 200:
            self.showPopupBox("Error Getting Users","Something went horribly wrong!",QMessageBox.Critical)
            return
        user_list = response.json()
        self.projectCurrentUsersView.clear()
        self.projectCurrentUsersView.addItems(user_list["users"])

    def populateExistingProjects(self):
        response = requests.get(f'{self.server}/getprojectlist', auth=(self.username, self.password), verify=self.cert)
        if response.status_code != 200:
            self.showPopupBox("Error Getting Projects","Something went horribly wrong!",QMessageBox.Critical)
            return
        project_list = response.json()
        self.existingProjectsList.clear()
        self.existingProjectsList.addItems(project_list["projects"])
        for item in os.listdir(str(collare_home)):
            full_path = os.path.join(str(collare_home),item)
            if os.path.isdir(full_path):
                if item not in project_list["projects"]:
                    questionBox = QMessageBox()
                    answer = questionBox.question(self,"Possibly Deleted Project Detected", f"It appears that the project '{item}' has been removed by other users. Would you like to remove it from local storage?", questionBox.Yes | questionBox.No)
                    if answer == questionBox.Yes:
                        shutil.rmtree(full_path)

    def addProjectUserClickHandler(self):
        selectedItems = self.projectAllUsersView.selectedItems()
        user_list = []
        for item in selectedItems:
            user_list.append(item.text())
        if user_list:
            data = {"project":self.currentProject,"users":user_list}
            response = requests.post(f'{self.server}/addprojectusers', json=data, auth=(self.username, self.password), verify=self.cert)
            if response.status_code != 200:
                self.showPopupBox("Error Adding Project Users","Something went horribly wrong!",QMessageBox.Critical)
            self.populateCurrentProjectUserListing()

    def deleteProjectUserClickHandler(self):
        selectedItems = self.projectCurrentUsersView.selectedItems()
        user_list = []
        for item in selectedItems:
            user_list.append(item.text())
        if user_list:
            data = {"project":self.currentProject,"users":user_list}
            response = requests.post(f'{self.server}/deleteprojectuser', json=data, auth=(self.username, self.password), verify=self.cert)
            if response.status_code != 200:
                self.showPopupBox("Error Deleting Project Users","Something went horribly wrong!",QMessageBox.Critical)
            self.populateCurrentProjectUserListing()

    def refreshProjectTree(self):
        self.projectTreeView.clear()
        def fill_item(item,value):
            if type(value) is dict:
                for key, val in sorted(value.items()):
                    child = QTreeWidgetItem()
                    if key == "__file__type__" or key == "__locked__" or  key == "__rev_dbs__":
                        continue
                    if type(val) is dict:
                        if val["__file__type__"] == True:
                            if val["__locked__"]:
                                node_name = f"{key}"
                                #child.setText(1, (f"(checked-out by '{val['__locked__']}')"))
                            else:
                                node_name = key
                            child.setIcon(0,QtGui.QIcon.fromTheme("application-x-executable"))
                            for rev_db in val["__rev_dbs__"]:
                                rev_db_node = QTreeWidgetItem()
                                rev_db_node.setText(0,rev_db)
                                if val["__rev_dbs__"][rev_db]:
                                    rev_db_node.setText(1, (f"Checked-out by '{val['__rev_dbs__'][rev_db]}'"))
                                rev_db_node.setIcon(0,QtGui.QIcon(os.path.join(current_running_file_dir,"icons",f"{rev_db}.png")))
                                child.addChild(rev_db_node)
                        elif val["__file__type__"] == False:
                            node_name = key
                            child.setIcon(0,QtGui.QIcon.fromTheme("folder"))
                            item.setExpanded(True)
                        else:
                            node_name = key
                        child.setText(0, (node_name))
                        
                        item.addChild(child)
                        fill_item(child, val)
            else:
                child = QTreeWidgetItem()
                child.setText(0, (value))
                item.addChild(child)
        fill_item(self.projectTreeView.invisibleRootItem(),self.currentProjectManifest)
        

    def connectClickHandler(self):
        if self.connectButton.text() == "Connect":
            self.server = self.serverText.text()
            if self.server[-1] == "/":
                self.server = self.server[:-1]
            self.username = self.usernameText.text()
            self.password = self.passwordText.text()
            self.cert = self.serverCertPathText.text()
            if not self.server or not self.username or not self.password or not self.cert:
                self.showPopupBox("Cannot Initiate Connection","Please make sure that all fields are filled!",QMessageBox.Critical)
                return
            response = requests.get(f'{self.server}/ping', auth=(self.username, self.password), verify=self.cert)
            if response.text == "SUCCESS":
                self.onSuccessConnect()
                self.storeConnectionDetails(self.server,self.username,self.cert)
            else:
                self.showPopupBox("Cannot Initiate Connection","Connection not successful! Check provided data and try again!",QMessageBox.Critical)
                return
        else:
            self.onDisconnect()
        
        
# SAVE THIS
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1021, 747)
        Dialog.setMinimumSize(Dialog.size())

        frame = QFrame()
        Dialog.setCentralWidget(frame)
        layout = QHBoxLayout()
        frame.setLayout(layout)
        
        self.mainTabWidget = QtWidgets.QTabWidget(Dialog)
        self.mainTabWidget.setEnabled(True)
        self.mainTabWidget.setGeometry(QtCore.QRect(20, 10, 981, 721))
        self.mainTabWidget.setObjectName("mainTabWidget")

        layout.addWidget(self.mainTabWidget)

        self.connectionTab = QtWidgets.QWidget()
        self.connectionTab.setObjectName("connectionTab")
        self.serverText = QtWidgets.QLineEdit(self.connectionTab)
        self.serverText.setGeometry(QtCore.QRect(250, 50, 531, 25))
        self.serverText.setObjectName("serverText")
        self.label = QtWidgets.QLabel(self.connectionTab)
        self.label.setGeometry(QtCore.QRect(40, 50, 211, 17))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.connectionTab)
        self.label_2.setGeometry(QtCore.QRect(40, 80, 211, 17))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.connectionTab)
        self.label_3.setGeometry(QtCore.QRect(40, 110, 211, 17))
        self.label_3.setObjectName("label_3")
        self.usernameText = QtWidgets.QLineEdit(self.connectionTab)
        self.usernameText.setGeometry(QtCore.QRect(250, 80, 531, 25))
        self.usernameText.setObjectName("usernameText")
        self.passwordText = QtWidgets.QLineEdit(self.connectionTab)
        self.passwordText.setGeometry(QtCore.QRect(250, 110, 531, 25))
        self.passwordText.setEchoMode(QtWidgets.QLineEdit.Password)
        self.passwordText.setObjectName("passwordText")
        self.serverCertPathText = QtWidgets.QLineEdit(self.connectionTab)
        self.serverCertPathText.setGeometry(QtCore.QRect(250, 140, 531, 25))
        self.serverCertPathText.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.serverCertPathText.setObjectName("serverCertPathText")
       
        self.label_6 = QtWidgets.QLabel(self.connectionTab)
        self.label_6.setGeometry(QtCore.QRect(40, 240, 161, 17))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.frame = QtWidgets.QFrame(self.connectionTab)
        self.frame.setGeometry(QtCore.QRect(10, 10, 961, 211))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label_12 = QtWidgets.QLabel(self.frame)
        self.label_12.setGeometry(QtCore.QRect(30, 10, 151, 17))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.connectButton = QtWidgets.QPushButton(self.frame)
        self.connectButton.setGeometry(QtCore.QRect(680, 160, 89, 25))
        self.connectButton.setObjectName("connectButton")
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(30, 160, 191, 17))
        self.label_4.setObjectName("label_4")
        self.connectStatusLabel = QtWidgets.QLabel(self.frame)
        self.connectStatusLabel.setGeometry(QtCore.QRect(240, 160, 131, 17))
        self.connectStatusLabel.setTextFormat(QtCore.Qt.PlainText)
        self.connectStatusLabel.setObjectName("connectStatusLabel")
        self.label_20 = QtWidgets.QLabel(self.frame)
        self.label_20.setGeometry(QtCore.QRect(30, 130, 201, 17))
        self.label_20.setObjectName("label_20")
        self.existingProjectFrame = QtWidgets.QFrame(self.connectionTab)
        self.existingProjectFrame.setGeometry(QtCore.QRect(10, 230, 491, 451))
        self.existingProjectFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.existingProjectFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.existingProjectFrame.setObjectName("existingProjectFrame")

        self.existingProjectsList = QtWidgets.QListWidget(self.existingProjectFrame)
        self.existingProjectsList.setGeometry(QtCore.QRect(30, 30, 431, 331))
        self.existingProjectsList.setObjectName("existingProjectsList")
        
        self.selectExistingProjectButton = QtWidgets.QPushButton(self.existingProjectFrame)
        self.selectExistingProjectButton.setGeometry(QtCore.QRect(30, 410, 431, 25))
        self.selectExistingProjectButton.setObjectName("selectExistingProjectButton")
        self.deleteProject = QtWidgets.QPushButton(self.existingProjectFrame)
        self.deleteProject.setGeometry(QtCore.QRect(30, 375, 431, 25))
        self.deleteProject.setObjectName("deleteProject")
        self.newProjectFrame = QtWidgets.QFrame(self.connectionTab)
        self.newProjectFrame.setGeometry(QtCore.QRect(510, 230, 461, 451))
        self.newProjectFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.newProjectFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.newProjectFrame.setObjectName("newProjectFrame")
        self.label_7 = QtWidgets.QLabel(self.newProjectFrame)
        self.label_7.setGeometry(QtCore.QRect(10, 10, 101, 17))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.newProjectFrame)
        self.label_8.setGeometry(QtCore.QRect(10, 40, 67, 17))
        self.label_8.setObjectName("label_8")
        self.newProjectName = QtWidgets.QLineEdit(self.newProjectFrame)
        self.newProjectName.setGeometry(QtCore.QRect(10, 60, 421, 25))
        self.newProjectName.setObjectName("newProjectName")
        self.label_9 = QtWidgets.QLabel(self.newProjectFrame)
        self.label_9.setGeometry(QtCore.QRect(10, 100, 67, 17))
        self.label_9.setObjectName("label_9")

        self.newProjectUsersList = QtWidgets.QListWidget(self.newProjectFrame)
        self.newProjectUsersList.setGeometry(QtCore.QRect(10, 120, 421, 281))
        self.newProjectUsersList.setObjectName("newProjectUsersList")
        self.newProjectUsersList.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
       
        self.createNewProjectButton = QtWidgets.QPushButton(self.newProjectFrame)
        self.createNewProjectButton.setGeometry(QtCore.QRect(10, 410, 421, 25))
        self.createNewProjectButton.setObjectName("createNewProjectButton")
        self.frame.raise_()
        self.existingProjectFrame.raise_()
        self.serverText.raise_()
        self.label.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.usernameText.raise_()
        self.passwordText.raise_()
        self.existingProjectsList.raise_()
        self.label_6.raise_()
        self.newProjectFrame.raise_()
        self.mainTabWidget.addTab(self.connectionTab, "")
        self.projectTab = QtWidgets.QWidget()
        self.projectTab.setEnabled(False)
        self.projectTab.setObjectName("projectTab")
        projectLayout = QHBoxLayout()
        self.projectTab.setLayout(projectLayout)
        
        #self.projectTreeView = QtWidgets.QTreeWidget(self.projectTab)
        self.projectTreeView = ProjectTree(self.projectTab)
        self.projectTreeView.setGeometry(QtCore.QRect(10, 10, 961, 671))
        self.projectTreeView.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)  
        self.projectTreeView.customContextMenuRequested.connect(self.rightClickMenuHandle)  
        self.projectTreeView.setHeaderItem(QTreeWidgetItem(["File","Status"]))
        self.projectTreeView.setColumnWidth(0,500)
        projectLayout.addWidget(self.projectTreeView)

        self.projectTreeView.setObjectName("projectTreeView")
        self.mainTabWidget.addTab(self.projectTab, "")
        self.adminTab = QtWidgets.QWidget()
        self.adminTab.setEnabled(False)
        self.adminTab.setObjectName("adminTab")
        self.frame_4 = QtWidgets.QFrame(self.adminTab)
        self.frame_4.setGeometry(QtCore.QRect(20, 10, 371, 191))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.label_10 = QtWidgets.QLabel(self.frame_4)
        self.label_10.setGeometry(QtCore.QRect(20, 10, 131, 17))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.frame_4)
        self.label_11.setGeometry(QtCore.QRect(20, 40, 141, 17))
        self.label_11.setObjectName("label_11")
        self.label_13 = QtWidgets.QLabel(self.frame_4)
        self.label_13.setGeometry(QtCore.QRect(20, 90, 179, 17))
        self.label_13.setObjectName("label_13")
        self.newPasswrdText1 = QtWidgets.QLineEdit(self.frame_4)
        self.newPasswrdText1.setGeometry(QtCore.QRect(20, 60, 331, 25))
        self.newPasswrdText1.setEchoMode(QtWidgets.QLineEdit.Password)
        self.newPasswrdText1.setObjectName("newPasswrdText1")
        self.newPasswrdText2 = QtWidgets.QLineEdit(self.frame_4)
        self.newPasswrdText2.setGeometry(QtCore.QRect(20, 110, 331, 25))
        self.newPasswrdText2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.newPasswrdText2.setObjectName("newPasswrdText2")
        self.changePasswordButton = QtWidgets.QPushButton(self.frame_4)
        self.changePasswordButton.setGeometry(QtCore.QRect(20, 150, 331, 25))
        self.changePasswordButton.setObjectName("changePasswordButton")
        self.frame_5 = QtWidgets.QFrame(self.adminTab)
        self.frame_5.setGeometry(QtCore.QRect(20, 210, 371, 191))
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.label_14 = QtWidgets.QLabel(self.frame_5)
        self.label_14.setGeometry(QtCore.QRect(20, 10, 171, 17))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.frame_5)
        self.label_15.setGeometry(QtCore.QRect(20, 40, 141, 17))
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.frame_5)
        self.label_16.setGeometry(QtCore.QRect(20, 90, 141, 17))
        self.label_16.setObjectName("label_16")
        self.newUserNameText = QtWidgets.QLineEdit(self.frame_5)
        self.newUserNameText.setGeometry(QtCore.QRect(20, 60, 331, 25))
        self.newUserNameText.setObjectName("newUserNameText")
        self.newUserPwdText = QtWidgets.QLineEdit(self.frame_5)
        self.newUserPwdText.setGeometry(QtCore.QRect(20, 110, 331, 25))
        self.newUserPwdText.setEchoMode(QtWidgets.QLineEdit.Password)
        self.newUserPwdText.setObjectName("newUserPwdText")
        self.newGlobalUserButton = QtWidgets.QPushButton(self.frame_5)
        self.newGlobalUserButton.setGeometry(QtCore.QRect(20, 150, 331, 25))
        self.newGlobalUserButton.setObjectName("newGlobalUserButton")
        self.frame_6 = QtWidgets.QFrame(self.adminTab)
        self.frame_6.setGeometry(QtCore.QRect(400, 10, 561, 391))
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.label_17 = QtWidgets.QLabel(self.frame_6)
        self.label_17.setGeometry(QtCore.QRect(10, 10, 281, 17))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")
        self.label_18 = QtWidgets.QLabel(self.frame_6)
        self.label_18.setGeometry(QtCore.QRect(10, 40, 141, 17))
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.frame_6)
        self.label_19.setGeometry(QtCore.QRect(290, 40, 141, 17))
        self.label_19.setObjectName("label_19")
        self.projectCurrentUsersView = QtWidgets.QListWidget(self.frame_6)
        self.projectCurrentUsersView.setGeometry(QtCore.QRect(10, 60, 261, 281))
        self.projectCurrentUsersView.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.projectCurrentUsersView.setObjectName("projectCurrentUsersView")


        self.projectAllUsersView = QtWidgets.QListWidget(self.frame_6)
        self.projectAllUsersView.setGeometry(QtCore.QRect(290, 60, 261, 281))
        self.projectAllUsersView.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.projectAllUsersView.setObjectName("projectAllUsersView")

        self.currentProjectRemoveUsersButton = QtWidgets.QPushButton(self.frame_6)
        self.currentProjectRemoveUsersButton.setGeometry(QtCore.QRect(10, 350, 261, 25))
        self.currentProjectRemoveUsersButton.setObjectName("currentProjectRemoveUsersButton")
        self.currentProjectAddUsersButton = QtWidgets.QPushButton(self.frame_6)
        self.currentProjectAddUsersButton.setGeometry(QtCore.QRect(290, 350, 261, 25))
        self.currentProjectAddUsersButton.setObjectName("currentProjectAddUsersButton")
        self.mainTabWidget.addTab(self.adminTab, "")

        self.retranslateUi(Dialog)
        self.mainTabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        # SAVE THIS
        self.newProjectFrame.setEnabled(False)
        self.existingProjectFrame.setEnabled(False)

        self.newGlobalUserButton.clicked.connect(self.addNewGlobalUserClickHandler)
        self.createNewProjectButton.clicked.connect(self.createNewProjectClickHandler)
        self.connectButton.clicked.connect(self.connectClickHandler)
        self.selectExistingProjectButton.clicked.connect(self.existingProjectSelectHandler)
        self.deleteProject.clicked.connect(self.deleteExistingProjectHandler)
        self.existingProjectsList.itemDoubleClicked.connect(self.existingProjectSelectHandler)
        self.currentProjectAddUsersButton.clicked.connect(self.addProjectUserClickHandler)
        self.currentProjectRemoveUsersButton.clicked.connect(self.deleteProjectUserClickHandler)
        self.changePasswordButton.clicked.connect(self.changePasswordClickHandler)
        self.projectTreeView.itemDoubleClicked.connect(self.openDoubleClickWrapper)
        

        self.prepopulateConnect()
        # SAVE THIS

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "CollaRE Client"))
        Dialog.setWindowIcon(QIcon(os.path.join(current_running_file_dir,"icons","collare.png")))
        self.label.setText(_translate("Dialog", "Server (https://remote.com/):"))
        self.label_2.setText(_translate("Dialog", "Username:"))
        self.label_3.setText(_translate("Dialog", "Password:"))
        self.label_6.setText(_translate("Dialog", "Avaialable Projects:"))
        self.label_12.setText(_translate("Dialog", "Connection Settings:"))
        self.connectButton.setText(_translate("Dialog", "Connect"))
        self.label_4.setText(_translate("Dialog", "Connection Status:"))
        self.connectStatusLabel.setText(_translate("Dialog", "Disconnected"))
        self.label_20.setText(_translate("Dialog", "Server certificate path:"))
        self.selectExistingProjectButton.setText(_translate("Dialog", "Select Project"))
        self.deleteProject.setText(_translate("Dialog", "Delete Project"))
        self.label_7.setText(_translate("Dialog", "New Project:"))
        self.label_8.setText(_translate("Dialog", "Name:"))
        self.label_9.setText(_translate("Dialog", "Users:"))
        self.createNewProjectButton.setText(_translate("Dialog", "Create Project"))
        self.mainTabWidget.setTabText(self.mainTabWidget.indexOf(self.connectionTab), _translate("Dialog", "Connection"))
        self.mainTabWidget.setTabText(self.mainTabWidget.indexOf(self.projectTab), _translate("Dialog", "Project View"))
        self.label_10.setText(_translate("Dialog", "Change Password:"))
        self.label_11.setText(_translate("Dialog", "New Password:"))
        self.label_13.setText(_translate("Dialog", "Confirm New Password:"))
        self.changePasswordButton.setText(_translate("Dialog", "Change Password"))
        self.label_14.setText(_translate("Dialog", "New User (admin only):"))
        self.label_15.setText(_translate("Dialog", "Username:"))
        self.label_16.setText(_translate("Dialog", "Password"))
        self.newGlobalUserButton.setText(_translate("Dialog", "Create User"))
        self.label_17.setText(_translate("Dialog", "Add/remove users of current project:"))
        self.label_18.setText(_translate("Dialog", "Current users:"))
        self.label_19.setText(_translate("Dialog", "All users:"))
        self.currentProjectRemoveUsersButton.setText(_translate("Dialog", "Remove Users"))
        self.currentProjectAddUsersButton.setText(_translate("Dialog", "Add Users"))
        self.mainTabWidget.setTabText(self.mainTabWidget.indexOf(self.adminTab), _translate("Dialog", "Admin"))


class CollaRE(QtWidgets.QMainWindow, Ui_Dialog):
    def __init__(self, parent=None):
        super(CollaRE, self).__init__(parent)
        self.setupUi(self)

def main():
    app = QApplication(sys.argv)
    form = CollaRE()
    form.show()
    app.exec_()

if __name__ == '__main__':
    # Create projects directory if it does not exist
    if not os.path.isdir(collare_home):
        os.mkdir(collare_home)
    main()